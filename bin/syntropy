#!/usr/bin/env ruby
# frozen_string_literal: true

require 'syntropy'
require 'optparse'

env = {
  mount_path: '/',
  banner: Syntropy::BANNER,
  logger: true,
  builtin_applet_path: '/.syntropy'
}

parser = OptionParser.new do |o|
  o.banner = 'Usage: syntropy [options] DIR'

  o.on('-b', '--bind BIND', String,
       'Bind address (default: http://0.0.0.0:1234). You can specify this flag multiple times to bind to multiple addresses.') do
    env[:bind] ||= []
    env[:bind] << it
  end

  o.on('-s', '--silent', 'Silent mode') do
    env[:banner] = nil
    env[:logger] = nil
  end

  o.on('-w', '--watch', 'Watch for changed files') do
    env[:watch_files] = 0.1
  end

  o.on('-h', '--help', 'Show this help message') do
    puts o
    exit
  end

  o.on('-m', '--mount PATH', 'Set mount path (default: /)') do |path|
    p mount: path
    env[:mount_path] = path
    env[:builtin_applet_path] = File.join(path, '.syntropy')
  end

  o.on('--no-builtin-applet', 'Do not mount builtin applet') do
    env[:builtin_applet_path] = nil
  end

  o.on('-v', '--version', 'Show version') do
    require 'syntropy/version'
    puts "Syntropy version #{Syntropy::VERSION}"
    exit
  end
end

RubyVM::YJIT.enable rescue nil

begin
  parser.parse!
rescue StandardError => e
  puts e.message
  puts e.backtrace.join("\n")
  exit
end

env[:root_dir] = ARGV.shift || '.'

if !File.directory?(env[:root_dir])
  puts "#{File.expand_path(env[:root_dir])} Not a directory"
  exit
end

puts env[:banner] if env[:banner]
env[:banner] = false


# We set Syntropy.machine so we can reference it from anywhere
env[:machine] = Syntropy.machine = UM.new
env[:logger] = env[:logger] && TP2::Logger.new(env[:machine], **env)

require 'syntropy/version'

env[:logger]&.info(message: "Running Syntropy version #{Syntropy::VERSION}")
app = Syntropy::App.load(env)
TP2.run(env) { app.call(it) }
